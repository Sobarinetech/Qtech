import streamlit as st
import io
import qrcode
from PIL import Image, ImageDraw, ImageOps
import google.generativeai as genai
import random

# Configure API keys securely from Streamlit's secrets
genai.configure(api_key=st.secrets["GOOGLE_API_KEY"])

# QR Code Generator Function
def generate_qr(data, error_correction, box_size, border, fill_color, back_color, logo=None, rounded=False, shadow=False, rotate_angle=0, background_img=None, custom_icon=None):
    qr = qrcode.QRCode(
        version=1,  # Ensure version is within 1 to 40
        error_correction=error_correction,
        box_size=box_size,
        border=border,
    )
    qr.add_data(data)
    qr.make(fit=True)
    img = qr.make_image(fill_color=fill_color, back_color=back_color)

    if logo:
        logo_img = Image.open(logo)
        pos = ((img.size[0] - logo_img.size[0]) // 2, (img.size[1] - logo_img.size[1]) // 2)
        img.paste(logo_img, pos)

    if rounded:
        img = ImageOps.expand(img, border=10, fill=fill_color)
        mask = Image.new('L', img.size, 0)
        draw = ImageDraw.Draw(mask)
        draw.ellipse((10, 10, img.size[0] - 10, img.size[1] - 10), fill=255)
        img.putalpha(mask)

    if shadow:
        img = ImageOps.expand(img, border=5, fill=back_color)

    if rotate_angle:
        img = img.rotate(rotate_angle, expand=True)

    if background_img:
        background = Image.open(background_img)
        background.paste(img, ((background.size[0] - img.size[0]) // 2, (background.size[1] - img.size[1]) // 2))
        img = background

    if custom_icon:
        icon_img = Image.open(custom_icon)
        img.paste(icon_img, ((img.size[0] - icon_img.size[0]) // 2, (img.size[1] - icon_img.size[1]) // 2))

    return img

# Streamlit App UI for Generative AI with QR Code
st.title("Advanced QR Code Generator with Generative AI")
st.write("Use AI to get responses and generate customized QR codes based on your prompt.")

# Generative AI Prompt input field
prompt = st.text_input("Enter your prompt for AI response:", "best alternatives to Power BI?")

# Button to generate AI response and QR code
if st.button("Generate AI Response and QR Code"):
    try:
        # Load and configure the model
        model = genai.GenerativeModel('gemini-1.5-flash')
        
        # Generate response from the model
        response = model.generate_content(prompt)
        
        # Display AI Response
        st.write("AI Response:")
        st.write(response.text)
        
        # Generate QR Code for the response
        data = response.text  # Content generated by AI will be the QR code data
        if data:
            # QR code customization options
            error_correction = st.selectbox("Select Error Correction Level:", [
                qrcode.constants.ERROR_CORRECT_L,
                qrcode.constants.ERROR_CORRECT_M,
                qrcode.constants.ERROR_CORRECT_Q,
                qrcode.constants.ERROR_CORRECT_H,
            ])
            box_size = st.slider("Select QR Code Size (box size):", 1, 10, 5)
            border = st.slider("Select Border Size:", 1, 10, 4)
            fill_color = st.color_picker("Select QR Code Color:", "#000000")
            back_color = st.color_picker("Select Background Color:", "#FFFFFF")
            logo = st.file_uploader("Upload Logo (optional):", type=["png", "jpg", "jpeg"])
            rounded = st.checkbox("Rounded QR Code Blocks")
            shadow = st.checkbox("Apply Shadow Effect")
            rotate_angle = st.slider("Rotate QR Code (degrees):", 0, 360, 0)
            background_img = st.file_uploader("Upload Background Image (optional):", type=["png", "jpg", "jpeg"])
            custom_icon = st.file_uploader("Upload Custom Icon (optional):", type=["png", "jpg", "jpeg"])

            # Generate QR Code
            img = generate_qr(data, error_correction, box_size, border, fill_color, back_color, logo, rounded, shadow, rotate_angle, background_img, custom_icon)
            
            if img:
                # Display the generated QR code
                img_buffer = io.BytesIO()
                img.save(img_buffer, format="PNG")
                img_bytes = img_buffer.getvalue()
                st.image(img_bytes, caption="Your QR Code", use_column_width=True)

                # Provide the option to download the QR code image
                st.download_button(
                    label="Download QR Code",
                    data=img_bytes,
                    file_name="qr_code.png",
                    mime="image/png",
                )
            else:
                st.error("QR Code generation failed.")
        else:
            st.error("No AI response to generate QR code.")
    except Exception as e:
        st.error(f"Error: {e}")
